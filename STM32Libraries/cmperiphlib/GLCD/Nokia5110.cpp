/*
 7-17-2011
 Spark Fun Electronics 2011
 Nathan Seidle
 
 This code is public domain but you buy me a beer if you use this and we meet someday (Beerware license).
 
 This code writes a series of images and text to the Nokia 5110 84x48 graphic LCD:
 http://www.sparkfun.com/products/10168
 
 Do not drive the backlight with 5V. It will smoke. However, the backlight on the LCD seems to be 
 happy with direct drive from the 3.3V regulator.

 Although the PCD8544 controller datasheet recommends 3.3V, the graphic Nokia 5110 LCD can run at 3.3V or 5V. 
 No resistors needed on the signal lines.
 
 You will need 5 signal lines to connect to the LCD, 3.3 or 5V for power, 3.3V for LED backlight, and 1 for ground.
 */

/*
#include "armcore.h"
#include "gpio.h"
#include "delay.h"
#include "SPI.h"
*/
#include <ctype.h>

#include "Nokia5110.h"

/*
void setup(void) {
  LCDInit(); //Init the LCD
}

void loop(void) {
  LCDClear();
  LCDBitmap(SFEFlame);
  delay(1000);

  LCDClear();
  LCDBitmap(SFEFlameBubble);
  delay(1000);

  LCDClear();
  LCDBitmap(awesome);
  delay(1000);

  LCDClear();
  LCDString("Hello World!");
  delay(1000);
}
*/
void Nokia5110::gotoXY(int x, int y) {
	select();
  write(0, 0x80 | x);  // Column.
  write(0, 0x40 | y);  // Row.  ?
	deselect();
	textcursor = x + y* 84 ;
}

void Nokia5110::cursor(int col) {
	textcursor = col;
}

//This takes a large array of bits and sends them to the LCD
void Nokia5110::drawBitmap(const byte my_array[]){
	select();
  for (int index = 0 ; index < (LCD_X * LCD_Y / 8) ; index++)
    write(LCD_DATA, my_array[index]);
	deselect();
}

//This function takes in a character, looks it up in the font table/array
//And writes it to the screen
//Each character is 8 bits tall and 5 bits wide. We pad one blank column of
//pixels on each side of the character for readability.
void Nokia5110::drawCharacter(const char ch) {
	if ( fontid == PROPORTIONAL10x15 )
		drawProportionalFont(Chicago10x15, ch);
	else
		drawFixedFont(ascii8x5, ch);
}

void Nokia5110::drawFixedFont(const byte font[], char character) {
	uint16 width = font[0];
//	uint16 height = font[1];
	uint16 pixbytebase = 3;
	
	select();
  write(LCD_DATA, 0x00); //Blank vertical line padding
  for (int index = 0 ; index < width ; index++)
    write(LCD_DATA, ascii8x5[pixbytebase + (character - 0x20)*width + index]);
    //0x20 is the ASCII character for Space (' '). The font table starts with this character
  write(LCD_DATA, 0x00); //Blank vertical line padding
	deselect();
	
	textcursor += 2 + width;
}

//This function takes in a character, looks it up in the font table/array
//And writes it to the screen
//Each character is 8 bits tall and 5 bits wide. We pad one blank column of
//pixels on each side of the character for readability.
void Nokia5110::drawProportionalFont(const byte font[], char character) {
//	byte mxwidth = font[0];
	byte height = font[1];
//	byte proportional = font[2];

	byte percolbytes = height/8 + height%2;
//	byte textrow = textcursor/percolbytes;
	
	uint16 idx = 3;
	byte fontwidth;
	byte ch = 0x20;
	for( ; ch != character; ch++) 
		idx += 1 + font[idx]*percolbytes;
	fontwidth = font[idx];
	idx++;
	
	if ( (textcursor % 84) + fontwidth+2 >= 84 )
		textcursor = (textcursor/84 + 1)*84;
	if ( character == 0x20 && textcursor%84 == 0 )
		return;
	select();
	for(int bytepos = 0; bytepos < percolbytes; bytepos++) {
		write(0, 0x80 | textcursor % 84);  // Column.
		write(0, 0x40 | percolbytes*(textcursor/84) + bytepos ); //0+bytepos+(textcursor/84)*percolbytes);  // Row.  ?
		write(LCD_DATA, 0x00); //Blank vertical line padding
		for (int i = 0 ; i < fontwidth ; i++) {
			write(LCD_DATA, font[idx + bytepos + i*percolbytes]);
		}
		write(LCD_DATA, 0x00); //Blank vertical line padding
	}
	deselect();
	//
	textcursor += fontwidth + 2;
}

//Given a string of characters, one by one is passed to the LCD
void Nokia5110::drawString(char *characters) {
  while (*characters)
    drawCharacter(*characters++);
}

//Clears the LCD by writing zeros to the entire screen
void Nokia5110::clear(void) {
	select();
  for (int index = 0 ; index < (LCD_X * LCD_Y / 8) ; index++)
    write(LCD_DATA, 0x00);
	deselect();
  gotoXY(0, 0); //After we clear the display, return to the home position
}

//This sends the magical commands to the PCD8544
void Nokia5110::init(void) {
	
  //Configure control pins
  //pinMode(pin_SCE, OUTPUT);
  pinMode(pin_RESET, OUTPUT);
  pinMode(pin_DC, OUTPUT);
  //pinMode(pin_SDIN, OUTPUT);
  //pinMode(pin_SCLK, OUTPUT);

  //Reset the LCD to a known state
  digitalWrite(pin_RESET, LOW);
  digitalWrite(pin_RESET, HIGH);

	select();
  write(LCD_COMMAND, 0x21); //Tell LCD that extended commands follow
  write(LCD_COMMAND, 0xBC); //Set LCD Vop (Contrast): Try 0xB1(good @ 3.3V) or 0xBF if your display is too dark
  write(LCD_COMMAND, 0x04); //Set Temp coefficent
  write(LCD_COMMAND, 0x14); //LCD bias mode 1:48: Try 0x13 or 0x14

  write(LCD_COMMAND, 0x20); //We must send 0x20 before modifying the display control mode
  write(LCD_COMMAND, 0x0C); //Set display control, normal mode. 0x0D for inverse
	deselect();
}

//There are two memory banks in the LCD, data/RAM and commands. This 
//function sets the DC pin high or low depending, and then sends
//the data byte
void Nokia5110::write(byte data_or_command, byte data) {
	//spi_setMode(SPIBx, 64, SPI_CPOL_High, SPI_CPHA_2Edge, SPI_MSBFIRST); // mode 3, msb first
	
  digitalWrite(pin_DC, data_or_command); //Tell the LCD that we are writing either to data or a command
  //Send the data
  //digitalWrite(pin_SCE, LOW);
	spi_transfer(SPIx, data);
//  shiftOut(PIN_SDIN, PIN_SCLK, SPI_MSBFIRST, data);
  //digitalWrite(pin_SCE, HIGH);
}


//This table contains the hex values that represent pixels
//for a font that is 5 pixels wide and 8 pixels high
const byte Nokia5110::ascii8x5[] = {
	 0x05, 0x08, 'F', // width, hright, proprtional
   0x00, 0x00, 0x00, 0x00, 0x00,  // 20  
   0x00, 0x00, 0x5f, 0x00, 0x00,  // 21 !
   0x00, 0x07, 0x00, 0x07, 0x00,  // 22 "
   0x14, 0x7f, 0x14, 0x7f, 0x14,  // 23 #
   0x24, 0x2a, 0x7f, 0x2a, 0x12,  // 24 $
   0x23, 0x13, 0x08, 0x64, 0x62,  // 25 %
   0x36, 0x49, 0x55, 0x22, 0x50,  // 26 &
   0x00, 0x05, 0x03, 0x00, 0x00,  // 27 '
   0x00, 0x1c, 0x22, 0x41, 0x00,  // 28 (
   0x00, 0x41, 0x22, 0x1c, 0x00,  // 29 )
   0x14, 0x08, 0x3e, 0x08, 0x14,  // 2a *
   0x08, 0x08, 0x3e, 0x08, 0x08,  // 2b +
   0x00, 0x50, 0x30, 0x00, 0x00,  // 2c ,
   0x08, 0x08, 0x08, 0x08, 0x08,  // 2d -
   0x00, 0x60, 0x60, 0x00, 0x00,  // 2e .
   0x20, 0x10, 0x08, 0x04, 0x02,  // 2f /
   0x3e, 0x51, 0x49, 0x45, 0x3e,  // 30 0
   0x00, 0x42, 0x7f, 0x40, 0x00,  // 31 1
   0x42, 0x61, 0x51, 0x49, 0x46,  // 32 2
   0x21, 0x41, 0x45, 0x4b, 0x31,  // 33 3
   0x18, 0x14, 0x12, 0x7f, 0x10,  // 34 4
   0x27, 0x45, 0x45, 0x45, 0x39,  // 35 5
   0x3c, 0x4a, 0x49, 0x49, 0x30,  // 36 6
   0x01, 0x71, 0x09, 0x05, 0x03,  // 37 7
   0x36, 0x49, 0x49, 0x49, 0x36,  // 38 8
   0x06, 0x49, 0x49, 0x29, 0x1e,  // 39 9
   0x00, 0x36, 0x36, 0x00, 0x00,  // 3a :
   0x00, 0x56, 0x36, 0x00, 0x00,  // 3b ;
   0x08, 0x14, 0x22, 0x41, 0x00,  // 3c <
   0x14, 0x14, 0x14, 0x14, 0x14,  // 3d =
   0x00, 0x41, 0x22, 0x14, 0x08,  // 3e >
   0x02, 0x01, 0x51, 0x09, 0x06,  // 3f ?
   0x32, 0x49, 0x79, 0x41, 0x3e,  // 40 @
   0x7e, 0x11, 0x11, 0x11, 0x7e,  // 41 A
   0x7f, 0x49, 0x49, 0x49, 0x36,  // 42 B
   0x3e, 0x41, 0x41, 0x41, 0x22,  // 43 C
   0x7f, 0x41, 0x41, 0x22, 0x1c,  // 44 D
   0x7f, 0x49, 0x49, 0x49, 0x41,  // 45 E
   0x7f, 0x09, 0x09, 0x09, 0x01,  // 46 F
   0x3e, 0x41, 0x49, 0x49, 0x7a,  // 47 G
   0x7f, 0x08, 0x08, 0x08, 0x7f,  // 48 H
   0x00, 0x41, 0x7f, 0x41, 0x00,  // 49 I
   0x20, 0x40, 0x41, 0x3f, 0x01,  // 4a J
   0x7f, 0x08, 0x14, 0x22, 0x41,  // 4b K
   0x7f, 0x40, 0x40, 0x40, 0x40,  // 4c L
   0x7f, 0x02, 0x0c, 0x02, 0x7f,  // 4d M
   0x7f, 0x04, 0x08, 0x10, 0x7f,  // 4e N
   0x3e, 0x41, 0x41, 0x41, 0x3e,  // 4f O
   0x7f, 0x09, 0x09, 0x09, 0x06,  // 50 P
   0x3e, 0x41, 0x51, 0x21, 0x5e,  // 51 Q
   0x7f, 0x09, 0x19, 0x29, 0x46,  // 52 R
   0x46, 0x49, 0x49, 0x49, 0x31,  // 53 S
   0x01, 0x01, 0x7f, 0x01, 0x01,  // 54 T
   0x3f, 0x40, 0x40, 0x40, 0x3f,  // 55 U
   0x1f, 0x20, 0x40, 0x20, 0x1f,  // 56 V
   0x3f, 0x40, 0x38, 0x40, 0x3f,  // 57 W
   0x63, 0x14, 0x08, 0x14, 0x63,  // 58 X
   0x07, 0x08, 0x70, 0x08, 0x07,  // 59 Y
   0x61, 0x51, 0x49, 0x45, 0x43,  // 5a Z
   0x00, 0x7f, 0x41, 0x41, 0x00,  // 5b [
   0x02, 0x04, 0x08, 0x10, 0x20,  // 5c '\\'
   0x00, 0x41, 0x41, 0x7f, 0x00,  // 5d ]
   0x04, 0x02, 0x01, 0x02, 0x04,  // 5e ^
   0x40, 0x40, 0x40, 0x40, 0x40,  // 5f _
   0x00, 0x01, 0x02, 0x04, 0x00,  // 60 `
   0x20, 0x54, 0x54, 0x54, 0x78,  // 61 a
   0x7f, 0x48, 0x44, 0x44, 0x38,  // 62 b
   0x38, 0x44, 0x44, 0x44, 0x20,  // 63 c
   0x38, 0x44, 0x44, 0x48, 0x7f,  // 64 d
   0x38, 0x54, 0x54, 0x54, 0x18,  // 65 e
   0x08, 0x7e, 0x09, 0x01, 0x02,  // 66 f
   0x0c, 0x52, 0x52, 0x52, 0x3e,  // 67 g
   0x7f, 0x08, 0x04, 0x04, 0x78,  // 68 h
   0x00, 0x44, 0x7d, 0x40, 0x00,  // 69 i
   0x20, 0x40, 0x44, 0x3d, 0x00,  // 6a j 
   0x7f, 0x10, 0x28, 0x44, 0x00,  // 6b k
   0x00, 0x41, 0x7f, 0x40, 0x00,  // 6c l
   0x7c, 0x04, 0x18, 0x04, 0x78,  // 6d m
   0x7c, 0x08, 0x04, 0x04, 0x78,  // 6e n
   0x38, 0x44, 0x44, 0x44, 0x38,  // 6f o
   0x7c, 0x14, 0x14, 0x14, 0x08,  // 70 p
   0x08, 0x14, 0x14, 0x18, 0x7c,  // 71 q
   0x7c, 0x08, 0x04, 0x04, 0x08,  // 72 r
   0x48, 0x54, 0x54, 0x54, 0x20,  // 73 s
   0x04, 0x3f, 0x44, 0x40, 0x20,  // 74 t
   0x3c, 0x40, 0x40, 0x20, 0x7c,  // 75 u
   0x1c, 0x20, 0x40, 0x20, 0x1c,  // 76 v
   0x3c, 0x40, 0x30, 0x40, 0x3c,  // 77 w
   0x44, 0x28, 0x10, 0x28, 0x44,  // 78 x
   0x0c, 0x50, 0x50, 0x50, 0x3c,  // 79 y
   0x44, 0x64, 0x54, 0x4c, 0x44,  // 7a z
   0x00, 0x08, 0x36, 0x41, 0x00,  // 7b {
   0x00, 0x00, 0x7f, 0x00, 0x00,  // 7c |
   0x00, 0x41, 0x36, 0x08, 0x00,  // 7d }
   0x10, 0x08, 0x08, 0x10, 0x08,  // 7e ~
   0x78, 0x46, 0x41, 0x46, 0x78,  // 7f DEL
};

//This is the SFE flame in bit form
const byte Nokia5110::SFEFlame[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF8, 0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0xFE, 0x1E, 0x0E, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFE, 0xFC, 0xF8, 0xF8, 0xF0, 0xF8, 0xFE, 0xFE, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xF8, 0xFC, 0xFE, 0xFE, 0xFF, 0xFF, 0xF3, 0xE0, 0xE0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0,
  0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F,
  0x3F, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03,
  0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x1F,
  0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

//Another SparkFun logo
/*
const byte Nokia5110::SFEFlameBubble [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
  0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF0, 0xE0, 0xE0, 0xC0, 0xC0, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0,
  0xF8, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x3F, 0x3F,
  0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xC0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x0F, 0x3F, 0x7F, 0x7F, 0x3F, 0x1E,
  0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x03, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0xE0,
  0xE0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF8, 0x7C, 0x7C, 0x7E, 0x7C, 0x38, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xF8, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x3F, 0x7F, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF0, 0xF0,
  0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
  0xE1, 0xE3, 0xE3, 0xE7, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0,
  0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x1F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F,
  0x3F, 0x3F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
  0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
  0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7E, 0x7C, 0x78, 0x70, 0x60, 0x40, 0x40, 0x00,
  0x00,
};
*/

const byte Nokia5110::Chicago10x15[] =	{
	0x0A, 0x0F, 'P', // maxwidth, height, proprtional
	/* ' ' (20), width 06 from +2 byte */
	0x04, 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00, // 0x00, 0x00,  0x00, 0x00,  
	/* '!' (21), width 02 from +15 byte */
	0x02, 0xF8, 0x0D,  0xF8, 0x0D,  
	/* '"' (22), width 03 from +20 byte */
	0x03, 0x38, 0x00,  0x00, 0x00,  0x38, 0x00,  
	/* '#' (23), width 07 from +27 byte */
	0x07, 0x00, 0x02,  0x00, 0x06,  0xE0, 0x03,  0x18, 0x02,  0x20, 0x06,  0xE0, 0x03,  0x18, 0x02,  
	/* '$' (24), width 05 from +42 byte */
	0x05, 0x70, 0x04,  0xC8, 0x08,  0xFC, 0x1F,  0x88, 0x09,  0x10, 0x07,  
	/* '%' (25), width 09 from +53 byte */
	0x09, 0x30, 0x00,  0x48, 0x00,  0x48, 0x0C,  0x30, 0x03,  0xC8, 0x00,  0x68, 0x06,  0x18, 0x09,  0x00, 0x09,  0x00, 0x06,  
	/* '&' (26), width 08 from +72 byte */
	0x08, 0x30, 0x07,  0xF8, 0x0F,  0xC8, 0x08,  0x08, 0x08,  0x18, 0x0F,  0x18, 0x07,  0x00, 0x01,  0xE0, 0x00,  
	/* ''' (27), width 01 from +89 byte */
	0x01, 0x38, 0x00,  
	/* '(' (28), width 03 from +92 byte */
	0x03, 0xF8, 0x0F,  0xFC, 0x1F,  0x04, 0x10,  
	/* ')' (29), width 03 from +99 byte */
	0x03, 0x04, 0x10,  0xFC, 0x1F,  0xF8, 0x0F,  
	/* '*' (2a), width 05 from +106 byte */
	0x05, 0x90, 0x00,  0x60, 0x00,  0xF8, 0x01,  0x60, 0x00,  0x90, 0x00,  
	/* '+' (2b), width 07 from +117 byte */
	0x07, 0x00, 0x01,  0x00, 0x01,  0x00, 0x01,  0xC0, 0x07,  0x00, 0x01,  0x00, 0x01,  0x00, 0x01,  
	/* ',' (2c), width 02 from +132 byte */
	0x02, 0x00, 0x2C,  0x00, 0x1C,  
	/* '-' (2d), width 05 from +137 byte */
	0x05, 0x00, 0x01,  0x00, 0x01,  0x00, 0x01,  0x00, 0x01,  0x00, 0x01,  
	/* '.' (2e), width 02 from +148 byte */
	0x02, 0x00, 0x0C,  0x00, 0x0C,  
	/* '/' (2f), width 05 from +153 byte */
	0x05, 0x00, 0x08,  0x00, 0x07,  0xC0, 0x00,  0x38, 0x00,  0x04, 0x00,  
	/* '0' (30), width 06 from +164 byte */
	0x06, 0xF0, 0x07,  0xF8, 0x0F,  0x88, 0x09,  0xE8, 0x08,  0xF8, 0x0F,  0xF0, 0x07,  
	/* '1' (31), width 02 from +177 byte */
	0x02, 0xF0, 0x0F,  0xF8, 0x0F,  
	/* '2' (32), width 06 from +182 byte */
	0x06, 0x10, 0x0C,  0x08, 0x0E,  0x08, 0x0B,  0x88, 0x09,  0xF8, 0x08,  0x70, 0x08,  
	/* '3' (33), width 06 from +195 byte */
	0x06, 0x08, 0x04,  0x48, 0x08,  0x68, 0x08,  0x78, 0x08,  0xD8, 0x0F,  0x88, 0x07,  
	/* '4' (34), width 07 from +208 byte */
	0x07, 0x80, 0x01,  0xC0, 0x01,  0x20, 0x01,  0x10, 0x01,  0xF8, 0x0F,  0xF8, 0x0F,  0x00, 0x01,  
	/* '5' (35), width 06 from +223 byte */
	0x06, 0x78, 0x04,  0x78, 0x08,  0x48, 0x08,  0x48, 0x08,  0xC8, 0x0F,  0x88, 0x07,  
	/* '6' (36), width 06 from +236 byte */
	0x06, 0xE0, 0x07,  0xF0, 0x0F,  0x58, 0x08,  0x48, 0x08,  0xC8, 0x0F,  0x80, 0x07,  
	/* '7' (37), width 07 from +249 byte */
	0x07, 0x08, 0x00,  0x08, 0x00,  0x08, 0x00,  0x08, 0x0F,  0xC8, 0x0F,  0xF8, 0x00,  0x38, 0x00,  
	/* '8' (38), width 06 from +264 byte */
	0x06, 0x70, 0x07,  0x78, 0x0F,  0x88, 0x08,  0x88, 0x08,  0x78, 0x0F,  0x70, 0x07,  
	/* '9' (39), width 06 from +277 byte */
	0x06, 0xF0, 0x00,  0xF8, 0x09,  0x08, 0x09,  0x08, 0x0D,  0xF8, 0x07,  0xF0, 0x03,  
	/* ':' (3a), width 02 from +290 byte */
	0x02, 0x60, 0x0C,  0x60, 0x0C,  
	/* ';' (3b), width 02 from +295 byte */
	0x02, 0x60, 0x2C,  0x60, 0x1C,  
	/* '<' (3c), width 05 from +300 byte */
	0x05, 0x80, 0x00,  0xC0, 0x01,  0x60, 0x03,  0x30, 0x06,  0x10, 0x04,  
	/* '=' (3d), width 06 from +311 byte */
	0x06, 0x80, 0x02,  0x80, 0x02,  0x80, 0x02,  0x80, 0x02,  0x80, 0x02,  0x80, 0x02,  
	/* '>' (3e), width 06 from +324 byte */
	0x06, 0x00, 0x00,  0x10, 0x04,  0x20, 0x02,  0x40, 0x01,  0x80, 0x00,  0x80, 0x00,  
	/* '?' (3f), width 06 from +337 byte */
	0x06, 0x10, 0x00,  0x08, 0x00,  0x88, 0x0D,  0xC8, 0x0D,  0x78, 0x00,  0x30, 0x00,  
	/* '@' (40), width 09 from +350 byte */
	0x09, 0xE0, 0x03,  0x10, 0x04,  0xC8, 0x09,  0x28, 0x0A,  0x28, 0x0A,  0xE8, 0x0B,  0x08, 0x0A,  0x10, 0x02,  0xE0, 0x03,  
	/* 'A' (41), width 06 from +369 byte */
	0x06, 0xF0, 0x0F,  0xF8, 0x0F,  0x88, 0x00,  0x88, 0x00,  0xF8, 0x0F,  0xF0, 0x0F,  
	/* 'B' (42), width 06 from +382 byte */
	0x06, 0xF8, 0x0F,  0xF8, 0x0F,  0x88, 0x08,  0x88, 0x08,  0x78, 0x0F,  0x70, 0x07,  
	/* 'C' (43), width 06 from +395 byte */
	0x06, 0xF0, 0x07,  0xF8, 0x0F,  0x08, 0x08,  0x08, 0x08,  0x08, 0x08,  0x10, 0x04,  
	/* 'D' (44), width 06 from +408 byte */
	0x06, 0xF8, 0x0F,  0xF8, 0x0F,  0x08, 0x08,  0x08, 0x08,  0xF8, 0x0F,  0xF0, 0x07,  
	/* 'E' (45), width 05 from +421 byte */
	0x05, 0xF8, 0x0F,  0xF8, 0x0F,  0x88, 0x08,  0x88, 0x08,  0x08, 0x08,  
	/* 'F' (46), width 05 from +432 byte */
	0x05, 0xF8, 0x0F,  0xF8, 0x0F,  0x88, 0x00,  0x88, 0x00,  0x08, 0x00,  
	/* 'G' (47), width 06 from +443 byte */
	0x06, 0xF0, 0x07,  0xF8, 0x0F,  0x08, 0x08,  0x08, 0x08,  0x88, 0x0F,  0x90, 0x07,  
	/* 'H' (48), width 06 from +456 byte */
	0x06, 0xF8, 0x0F,  0xF8, 0x0F,  0x80, 0x00,  0x80, 0x00,  0xF8, 0x0F,  0xF8, 0x0F,  
	/* 'I' (49), width 02 from +469 byte */
	0x02, 0xF8, 0x0F,  0xF8, 0x0F,  
	/* 'J' (4a), width 06 from +474 byte */
	0x06, 0x00, 0x07,  0x00, 0x0F,  0x00, 0x08,  0x00, 0x08,  0xF8, 0x0F,  0xF8, 0x07,  
	/* 'K' (4b), width 06 from +487 byte */
	0x06, 0xF8, 0x0F,  0xF8, 0x0F,  0xC0, 0x01,  0x20, 0x02,  0x10, 0x04,  0x08, 0x08,  
	/* 'L' (4c), width 05 from +500 byte */
	0x05, 0xF8, 0x0F,  0xF8, 0x0F,  0x00, 0x08,  0x00, 0x08,  0x00, 0x08,  
	/* 'M' (4d), width 0A from +511 byte */
	0x0A, 0xF8, 0x0F,  0x70, 0x00,  0xE0, 0x00,  0xC0, 0x01,  0x80, 0x03,  0xC0, 0x01,  0xE0, 0x00,  0x70, 0x00,  0xF8, 0x0F,  0xF8, 0x0F,  
	/* 'N' (4e), width 07 from +532 byte */
	0x07, 0xF8, 0x0F,  0x70, 0x00,  0xE0, 0x00,  0xC0, 0x01,  0x80, 0x03,  0x00, 0x07,  0xF8, 0x0F,  
	/* 'O' (4f), width 06 from +547 byte */
	0x06, 0xF0, 0x07,  0xF8, 0x0F,  0x08, 0x08,  0x08, 0x08,  0xF8, 0x0F,  0xF0, 0x07,  
	/* 'P' (50), width 06 from +560 byte */
	0x06, 0xF8, 0x0F,  0xF8, 0x0F,  0x88, 0x00,  0x88, 0x00,  0xF8, 0x00,  0x70, 0x00,  
	/* 'Q' (51), width 06 from +573 byte */
	0x06, 0xF0, 0x07,  0xF8, 0x0F,  0x08, 0x08,  0x08, 0x08,  0xF8, 0x1F,  0xF0, 0x17,  
	/* 'R' (52), width 06 from +586 byte */
	0x06, 0xF8, 0x0F,  0xF8, 0x0F,  0x88, 0x00,  0x88, 0x00,  0xF8, 0x0F,  0x70, 0x0F,  
	/* 'S' (53), width 05 from +599 byte */
	0x05, 0x70, 0x04,  0xF8, 0x08,  0xC8, 0x09,  0x88, 0x0F,  0x10, 0x07,  
	/* 'T' (54), width 08 from +610 byte */
	0x08, 0x08, 0x00,  0x08, 0x00,  0x08, 0x00,  0xF8, 0x0F,  0xF8, 0x0F,  0x08, 0x00,  0x08, 0x00,  0x08, 0x00,  
	/* 'U' (55), width 06 from +627 byte */
	0x06, 0xF8, 0x07,  0xF8, 0x0F,  0x00, 0x08,  0x00, 0x08,  0xF8, 0x0F,  0xF8, 0x07,  
	/* 'V' (56), width 06 from +640 byte */
	0x06, 0xF8, 0x0F,  0xF8, 0x0F,  0x00, 0x08,  0x00, 0x08,  0xF8, 0x07,  0xF8, 0x03,  
	/* 'W' (57), width 0A from +653 byte */
	0x0A, 0xF8, 0x0F,  0xF8, 0x0F,  0x00, 0x08,  0x00, 0x08,  0xF8, 0x0F,  0xF8, 0x0F,  0x00, 0x08,  0x00, 0x08,  0xF8, 0x07,  0xF8, 0x03,  
	/* 'X' (58), width 06 from +674 byte */
	0x06, 0x78, 0x0F,  0x78, 0x0F,  0x80, 0x00,  0x80, 0x00,  0x78, 0x0F,  0x78, 0x0F,  
	/* 'Y' (59), width 06 from +687 byte */
	0x06, 0x78, 0x00,  0xF8, 0x00,  0x80, 0x0F,  0x80, 0x0F,  0xF8, 0x00,  0x78, 0x00,  
	/* 'Z' (5a), width 06 from +700 byte */
	0x06, 0x08, 0x0C,  0x08, 0x0F,  0xC8, 0x0B,  0xF8, 0x08,  0x78, 0x08,  0x18, 0x08,  
	/* '[' (5b), width 02 from +713 byte */
	0x02, 0xFC, 0x1F,  0xFC, 0x1F,  
	/* '\\' (5c), width 05 from +718 byte */
	0x05, 0x04, 0x00,  0x38, 0x00,  0xC0, 0x00,  0x00, 0x07,  0x00, 0x08,  
	/* ']' (5d), width 02 from +729 byte */
	0x02, 0xFC, 0x1F,  0xFC, 0x1F,  
	/* '^' (5e), width 06 from +734 byte */
	0x06, 0x20, 0x00,  0x30, 0x00,  0x18, 0x00,  0x18, 0x00,  0x30, 0x00,  0x20, 0x00,  
	/* '_' (5f), width 08 from +747 byte */
	0x08, 0x00, 0x10,  0x00, 0x10,  0x00, 0x10,  0x00, 0x10,  0x00, 0x10,  0x00, 0x10,  0x00, 0x10,  0x00, 0x10,  
	/* '`' (60), width 02 from +764 byte */
	0x02, 0x04, 0x00,  0x08, 0x00,  
	/* 'a' (61), width 06 from +769 byte */
	0x06, 0x40, 0x06,  0x20, 0x0F,  0x20, 0x09,  0x20, 0x09,  0xE0, 0x0F,  0xC0, 0x0F,  
	/* 'b' (62), width 06 from +782 byte */
	0x06, 0xF8, 0x0F,  0xF8, 0x0F,  0x20, 0x08,  0x20, 0x08,  0xE0, 0x0F,  0xC0, 0x07,  
	/* 'c' (63), width 05 from +795 byte */
	0x05, 0xC0, 0x07,  0xE0, 0x0F,  0x20, 0x08,  0x20, 0x08,  0x40, 0x04,  
	/* 'd' (64), width 06 from +806 byte */
	0x06, 0xC0, 0x07,  0xE0, 0x0F,  0x20, 0x08,  0x20, 0x08,  0xF8, 0x0F,  0xF8, 0x0F,  
	/* 'e' (65), width 06 from +819 byte */
	0x06, 0xC0, 0x07,  0xE0, 0x0F,  0x20, 0x09,  0x20, 0x09,  0xE0, 0x09,  0xC0, 0x05,  
	/* 'f' (66), width 05 from +832 byte */
	0x05, 0x20, 0x00,  0xF0, 0x0F,  0xF8, 0x0F,  0x28, 0x00,  0x08, 0x00,  
	/* 'g' (67), width 06 from +843 byte */
	0x06, 0xC0, 0x27,  0xE0, 0x4F,  0x20, 0x48,  0x20, 0x48,  0xE0, 0x7F,  0xE0, 0x3F,  
	/* 'h' (68), width 06 from +856 byte */
	0x06, 0xF8, 0x0F,  0xF8, 0x0F,  0x20, 0x00,  0x20, 0x00,  0xE0, 0x0F,  0xC0, 0x0F,  
	/* 'i' (69), width 02 from +869 byte */
	0x02, 0xE8, 0x0F,  0xE8, 0x0F,  
	/* 'j' (6a), width 05 from +874 byte */
	0x05, 0x00, 0x10,  0x00, 0x20,  0x00, 0x20,  0xE8, 0x3F,  0xE8, 0x1F,  
	/* 'k' (6b), width 06 from +885 byte */
	0x06, 0xF8, 0x0F,  0xF8, 0x0F,  0x80, 0x02,  0xC0, 0x06,  0x60, 0x0C,  0x20, 0x08,  
	/* 'l' (6c), width 02 from +898 byte */
	0x02, 0xF8, 0x0F,  0xF8, 0x0F,  
	/* 'm' (6d), width 0A from +903 byte */
	0x0A, 0xE0, 0x0F,  0xE0, 0x0F,  0x20, 0x00,  0x20, 0x00,  0xE0, 0x0F,  0xC0, 0x0F,  0x20, 0x00,  0x20, 0x00,  0xE0, 0x0F,  0xC0, 0x0F,  
	/* 'n' (6e), width 06 from +924 byte */
	0x06, 0xE0, 0x0F,  0xE0, 0x0F,  0x20, 0x00,  0x20, 0x00,  0xE0, 0x0F,  0xC0, 0x0F,  
	/* 'o' (6f), width 06 from +937 byte */
	0x06, 0xC0, 0x07,  0xE0, 0x0F,  0x20, 0x08,  0x20, 0x08,  0xE0, 0x0F,  0xC0, 0x07,  
	/* 'p' (70), width 06 from +950 byte */
	0x06, 0xE0, 0x3F,  0xE0, 0x3F,  0x20, 0x08,  0x20, 0x08,  0xE0, 0x0F,  0xC0, 0x07,  
	/* 'q' (71), width 06 from +963 byte */
	0x06, 0xC0, 0x07,  0xE0, 0x0F,  0x20, 0x08,  0x20, 0x08,  0xE0, 0x3F,  0xE0, 0x3F,  
	/* 'r' (72), width 05 from +976 byte */
	0x05, 0xE0, 0x0F,  0xE0, 0x0F,  0x40, 0x00,  0x60, 0x00,  0x60, 0x00,  
	/* 's' (73), width 05 from +987 byte */
	0x05, 0xC0, 0x04,  0xE0, 0x09,  0xA0, 0x0B,  0x20, 0x0F,  0x40, 0x06,  
	/* 't' (74), width 04 from +998 byte */
	0x04, 0x20, 0x00,  0xF8, 0x07,  0xF8, 0x0F,  0x20, 0x08,  
	/* 'u' (75), width 06 from +1007 byte */
	0x06, 0xE0, 0x07,  0xE0, 0x0F,  0x00, 0x08,  0x00, 0x08,  0xE0, 0x0F,  0xE0, 0x0F,  
	/* 'v' (76), width 06 from +1020 byte */
	0x06, 0xE0, 0x0F,  0xE0, 0x0F,  0x00, 0x08,  0x00, 0x08,  0xE0, 0x07,  0xE0, 0x03,  
	/* 'w' (77), width 0A from +1033 byte */
	0x0A, 0xE0, 0x0F,  0xE0, 0x0F,  0x00, 0x08,  0x00, 0x08,  0xE0, 0x0F,  0xE0, 0x0F,  0x00, 0x08,  0x00, 0x08,  0xE0, 0x07,  0xE0, 0x03,  
	/* 'x' (78), width 06 from +1054 byte */
	0x06, 0xE0, 0x0E,  0xE0, 0x0E,  0x00, 0x01,  0x00, 0x01,  0xE0, 0x0E,  0xE0, 0x0E,  
	/* 'y' (79), width 06 from +1067 byte */
	0x06, 0xE0, 0x27,  0xE0, 0x4F,  0x00, 0x48,  0x00, 0x48,  0xE0, 0x7F,  0xE0, 0x3F,  
	/* 'z' (7a), width 06 from +1080 byte */
	0x06, 0x20, 0x0C,  0x20, 0x0E,  0x20, 0x09,  0xA0, 0x08,  0x60, 0x08,  0x20, 0x08,  
	/* '{' (7b), width 03 from +1093 byte */
	0x03, 0x80, 0x00,  0x78, 0x0F,  0x04, 0x10,  
	/* '|' (7c), width 01 from +1100 byte */
	0x01, 0xFC, 0x1F,  
	/* '}' (7d), width 03 from +1103 byte */
	0x03, 0x04, 0x10,  0x78, 0x0F,  0x80, 0x00,  
	/* '~' (7e), width 06 from +1110 byte */
	0x06, 0x40, 0x00,  0x20, 0x00,  0x20, 0x00,  0x40, 0x00,  0x40, 0x00,  0x20, 0x00,  
	/* '' (7f), width 05 from +1123 byte */
	0x05, 0xFF, 0x0F,  0x01, 0x08,  0x01, 0x08,  0x01, 0x08,  0xFF, 0x0F  
};
