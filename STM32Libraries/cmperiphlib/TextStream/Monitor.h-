/*
 *  Monitor.h
 *  
 *
 *
 */
#ifndef Monitor_H
#define Monitor_H

#include <Arduino.h>
#include <Stream.h>
#include <HardwareSerial.h>

const char endl = '\n';
const char cr = '\r';

class Monitor : public Stream {
private:
	const enum {
		UNDEFINED = 0,
		HARDWARESERIAL,
#ifdef SoftwareSerial_h
		SOFTWARESERIAL,
#endif
	} ser_class;

	Stream & port;
	byte curr_base;

public:

	static unsigned long asBCD(unsigned long lval);
	static int asHexadecimal(char * str, int offset);
	static int asBytes(byte[], int limit = 0);

	Monitor(Stream & st, char buf[]) : port(st), curr_base(HEX), ser_class(UNDEFINED) { }
	Monitor(HardwareSerial & st) : port(st), curr_base(HEX), ser_class(HARDWARESERIAL) { }
#ifdef SoftwareSerial_h
	Monitor(SoftwareSerial & st) : port(st), curr_base(HEX), ser_class(SOFTWARESERIAL) { }
#endif
//	~Monitor() { }

	void begin(long baud) {
		switch(ser_class) {
		case HARDWARESERIAL:
			((HardwareSerial&) port).begin(baud);
			break;
#ifdef SoftwareSerial_h
		case SOFTWARESERIAL:
			((SoftwareSerial&) port).begin(baud);
			break;
#endif
		}
	}

	// Overrinding Print's inherited virtual functions
	virtual size_t write(uint8_t b) {
		return port.write(b);
	}

	using Print::write;
	using Print::print;

	size_t radix(const byte b) {
		port.print((byte) b>>4, curr_base);
		port.print((byte) b&0x0f, curr_base);
		return 2;
	}
	size_t radix(const word w) {
		print((byte) highByte(w));
		print((byte) lowByte(w));
		return 4;
	}
	size_t radix(const unsigned long lv) {
		print((word) lv >> 16 & 0xffff);
		print((word) lv & 0xffff);
		return 8;
	}

	size_t radix(const byte a[], byte len) {
		for(int i = 0; i < len; i++) {
			print(a[i]);
			port.print(' ');
		}
		return len*2;
	}

	// Over-riding Stream's virtual functions
	virtual int available() {
		return port.available();
	} // may be overridden
	virtual int read() {
		return port.read();
	}
	virtual int peek() {
		return port.peek();
	}
	virtual void flush() {
		return port.flush();
	}
	//

	int read(byte rcv[], const int maxlen, const long limit = 10);
	int skipRead(const int len, const long limit = 10) { return read(NULL, len, limit); }
	boolean wait(const byte msg[], int len, long limit);

	//byte readLine(byte buf[], int lim, const char delims[]);
	int readToken(char buf[], long timeout = 50);
	int readNumber(char buf[], long timeout = 50);

};

template<class T>
inline Stream &operator <<(Stream &stream, T arg) {
	stream.print(arg);
	return stream;
}

#endif
